<GuiXml>
	<Controls>
		<TopLevelControl name="SimpleDPSConfigMenu" mouseEnabled="true" movable="true" clampedToScreen="true" hidden="true">
			<Dimensions x="500" y="575" />
			<Anchor point="CENTER" relativeTo="GuiRoot" relativePoint="CENTER"/>
			
			<Controls>
				<Backdrop name="$(parent)Bg" inherits="ZO_ThinBackdrop" />
				<Button name="$(parent)Button" text="Menu" mouseButton="true">
					<Textures
                        normal    ="/esoui/art/buttons/decline_up.dds"
                        pressed    ="/esoui/art/buttons/decline_down.dds"
                        mouseOver  ="/esoui/art/buttons/decline_over.dds"
                     />
				
					<Dimensions x="25" y="25" offsetX="20"/>
					<Anchor point="TOPRIGHT" relativeTo="$(parent)" relativePoint="TOPRIGHT"/>
					<OnClicked>
						SimpleDPS.ConfigUI:closeMenu()
					</OnClicked>
				</Button>
				
				<Control name="$(parent)TitleContainer">
					<Anchor point="TOP" relativeTo="$(parent)" relativePoint="TOP" />
					
					<Controls>
						<Label name="$(parent)Template" font="ZoFontWinH2" text="SimpleDPS Meter" hidden="true">
							<Anchor point="TOP" relativeTo="$(parent)" relativePoint="TOP" offsetY="10"/>
						</Label>
					
						<Label name="$(parent)BrandLabel" font="ZoFontWinH2" color="F5F5F5" text="Simple">
							<Anchor point="TOPLEFT" relativeTo="$(parent)Template" relativePoint="TOPLEFT"/>					
						</Label>

						<Label name="$(parent)ModeLabel" font="ZoFontWinH2" color="FF0000" text="DPS ">
							<Anchor point="LEFT" relativeTo="$(parent)BrandLabel" relativePoint="RIGHT"/>					
						</Label>
						
						<Label name="$(parent)MeterLabel" font="ZoFontWinH2" color="F5F5F5" text=" Meter">
							<Anchor point="TOPRIGHT" relativeTo="$(parent)Template" relativePoint="TOPRIGHT"/>					
						</Label>
					</Controls>
				</Control>
				
				<Control name="$(parent)AuthorContainer">
					<Anchor point="TOP" relativeTo="$(parent)TitleContainer" relativePoint="BOTTOM" />
					
					<Controls>
						<Label name="$(parent)Template" font="ZoFontWinH4" text="Developed By:  ProjectileRage" hidden="true">
							<Anchor point="TOP" relativeTo="$(parent)" relativePoint="BOTTOM" offsetY="40"/>
						</Label>
						
						<Label name="$(parent)DevelopedBy" font="ZoFontWinH4" color="F5F5F5" text="Developed By: ">
							<Anchor point="TOPLEFT" relativeTo="$(parent)Template" relativePoint="TOPLEFT"/>
						</Label>
						
						<Label name="$(parent)Author" font="ZoFontWinH4" color="FF0000" text=" ProjectileRage">
							<Anchor point="TOPRIGHT" relativeTo="$(parent)Template" relativePoint="TOPRIGHT"/>
						</Label>
					</Controls>
				</Control>
				
				<Control name="$(parent)Section">
					<Anchor point="TOP" relativeTo="$(parent)AuthorContainer" relativePoint="BOTTOM" offsetY="90"/>
					<Dimensions x="500" y="400" />
					
					<Controls>
						<Control name="$(parent)StatsShown" inherits="ZO_Options_Dropdown" hidden="false">
							<Dimensions x="400" y="25" />
							<Anchor point="TOP" relativeTo="$(parent)" relativePoint="TOP"/>
							
							<OnInitialized>
								self.data = {
									text = "Personal Stat Format: ",
									tooltipText="Select which stats you want shown on the Meter",
									valid = {
										1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
									},
									itemText = {										
										"DPS",
										"Percentage",
										"Total",
										"DPS (Percentage)",
										"Percentage (DPS)",
										"Total (DPS)",
										"DPS (Total)",
										"Total (Percentage)",
										"Percentage (Total)",
										"Total (DPS) Percentage",
										"Total (Percentage) DPS",
										"Percentage (DPS) Total",
										"Percentage (Total) DPS",
										"DPS (Total) Percentage",
										"DPS (Percentage) Total"
									},
									controlType = OPTIONS_DROPDOWN,
									mustPushApply = true,
									events = {SimpleDPS.FORMAT_CHANGED,SimpleDPS.FORMAT_CHANGED,SimpleDPS.FORMAT_CHANGED,SimpleDPS.FORMAT_CHANGED,SimpleDPS.FORMAT_CHANGED,SimpleDPS.FORMAT_CHANGED,SimpleDPS.FORMAT_CHANGED,SimpleDPS.FORMAT_CHANGED,SimpleDPS.FORMAT_CHANGED,SimpleDPS.FORMAT_CHANGED,SimpleDPS.FORMAT_CHANGED,SimpleDPS.FORMAT_CHANGED,SimpleDPS.FORMAT_CHANGED,SimpleDPS.FORMAT_CHANGED,SimpleDPS.FORMAT_CHANGED}									
								}								
							</OnInitialized>
						</Control>						
												
						<Control name="$(parent)CurrentFightBehavior" inherits="ZO_Options_Dropdown" hidden="false">
							<Dimensions x="460" y="25" />
							<Anchor point="TOP" relativeTo="$(parent)StatsShown" relativePoint="BOTTOM" offsetX="5" offsetY="12"/>
							
							<OnInitialized>
								self.data = {
									text = "Current Fight Behavior: ",
									tooltipText="Select how you want the current stat display to behave outside of combat",
									valid = {
										1,2,3
									},
									itemText = {										
										"Reset immediately after combat",
										"Reset shortly after combat",
										"Reset when re-entering combat"
									},
									controlType = OPTIONS_DROPDOWN,
									mustPushApply = true,
									events = { SimpleDPS.BEHAVIOR_CHANGED, SimpleDPS.BEHAVIOR_CHANGED, SimpleDPS.BEHAVIOR_CHANGED }
								}								
							</OnInitialized>
						</Control>						
						
						<Control name="$(parent)AutoHide" inherits="ZO_Options_Checkbox">
							<Dimensions x="500" y="25" />
							<Anchor point="TOP" relativeTo="$(parent)CurrentFightBehavior" relativePoint="BOTTOM" offsetY="24"/>							
							<OnInitialized>
								self.data = {
									tooltipText="The meter will be hidden shortly after combat"
								}
							</OnInitialized>
						</Control>
						
						<Control name="$(parent)PreviousFight" inherits="ZO_Options_Checkbox">
							<Dimensions x="500" y="25" />
							<Anchor point="TOPRIGHT" relativeTo="$(parent)AutoHide" relativePoint="BOTTOMRIGHT" offsetY="12"/>							
							
							<OnInitialized>
								self.data = {
									tooltipText="The meter will also display stats for the previous fight"
								}
							</OnInitialized>
						</Control>		
						
						<Control name="$(parent)WindowScale">
							<Dimensions x="500" y="25" />
							<Anchor point="TOP" relativeTo="$(parent)PreviousFight" relativePoint="BOTTOM" offsetY="12" />
							
							<OnInitialized> self.data = { tooltipText = "Controls the size of the meter" } </OnInitialized>							
							
							<Controls>						
								<Slider name="$(parent)Slider" inherits="ZO_Slider" mouseEnabled="true" hidden="false" verticalAlignment="CENTER" >
									<Dimensions x="250" y="15" />
									<Anchor point="CENTER" relativeTo="$(parent)" relativePoint="CENTER" offsetX="40"/>
									
									<OnInitialized>
										local min = 0.5
										local default = 1
										local max = 2.25
										
										self:SetMinMax(min, max)
										local defaultMarkerControl = CreateControlFromVirtual("$(parent)DefaultMarker", self, "ZO_Options_DefaultMarker")
										local offsetX = zo_clampedPercentBetween(min, max, default) * self:GetWidth()
										defaultMarkerControl:SetAnchor(TOP, self, LEFT, offsetX + 3, 4)
										
										local slider = self
										defaultMarkerControl:SetHandler("OnClicked", 
											function()
												PlaySound(SOUNDS.SINGLE_SETTING_RESET_TO_DEFAULT)
												slider:SetValue(default)
											end)
									</OnInitialized>
									
									<OnMouseEnter> ZO_Options_OnMouseEnter(self:GetParent()) </OnMouseEnter>
									<OnMouseExit> ZO_Options_OnMouseExit(self:GetParent()) </OnMouseExit>
								</Slider>
								
								<Label name="$(parent)Label" font="ZoFontWinH4" verticalAlignment="TOP" horizontalAlignment="RIGHT" text="Window Size:">
									<Dimensions x="150" y="25" />
									<Anchor point="RIGHT" relativeTo="$(parent)Slider" relativePoint="LEFT" offsetX="-18"/>
								</Label>
								
								<Label name="$(parent)Value" font="ZoFontWinH4" verticalAlignment="TOP" horizontalAlignment="LEFT" text="--">
									<Dimensions x="75" y="25" />
									<Anchor point="LEFT" relativeTo="$(parent)Slider" relativePoint="RIGHT" offsetX="12"/>
								</Label>
							</Controls>
						</Control>
						
						<Control name="$(parent)Transparency">
							<Dimensions x="500" y="25" />
							<Anchor point="TOP" relativeTo="$(parent)WindowScale" relativePoint="BOTTOM" offsetY="18" />							
							
							<OnInitialized> self.data = { tooltipText = "Controls the visibility of the meter background" } </OnInitialized>
							
							<Controls>							
								<Slider name="$(parent)Slider" inherits="ZO_Slider" mouseEnabled="true" hidden="false" verticalAlignment="CENTER">
									<Dimensions x="250" y="15" />
									<Anchor point="CENTER" relativeTo="$(parent)" relativePoint="CENTER" offsetX="40"/>
									
									<OnInitialized>
										local min = 0
										local default = 0
										local max = 1
										
										self:SetMinMax(min, max)
										local defaultMarkerControl = CreateControlFromVirtual("$(parent)DefaultMarker", self, "ZO_Options_DefaultMarker")
										local offsetX = zo_clampedPercentBetween(min, max, default) * self:GetWidth()
										defaultMarkerControl:SetAnchor(TOP, self, LEFT, offsetX + 3, 4)
										
										local slider = self
										defaultMarkerControl:SetHandler("OnClicked", 
											function()
												PlaySound(SOUNDS.SINGLE_SETTING_RESET_TO_DEFAULT)
												slider:SetValue(default)
											end)
									</OnInitialized>
									
									<OnMouseEnter> ZO_Options_OnMouseEnter(self:GetParent()) </OnMouseEnter>
									<OnMouseExit> ZO_Options_OnMouseExit(self:GetParent()) </OnMouseExit>
								</Slider>
								
								<Label name="$(parent)Label" font="ZoFontWinH4" verticalAlignment="TOP" horizontalAlignment="RIGHT" text="Transparency:">
									<Dimensions x="150" y="25" />
									<Anchor point="RIGHT" relativeTo="$(parent)Slider" relativePoint="LEFT" offsetX="-18"/>
								</Label>
							
								<Label name="$(parent)Value" font="ZoFontWinH4" verticalAlignment="TOP" horizontalAlignment="LEFT" text="--">
									<Dimensions x="75" y="25" />
									<Anchor point="LEFT" relativeTo="$(parent)Slider" relativePoint="RIGHT" offsetX="12"/>
								</Label>
							</Controls>
						</Control>
						
						<Control name="$(parent)Background">
							<Dimensions x="450" y="26" />
							<Anchor point="TOPLEFT" relativeTo="$(parent)Transparency" relativePoint="BOTTOMLEFT" offsetY="24" />
							
							<Controls>
								<Control name="$(parent)Color" inherits="ZO_Options_Color" inheritAlpha="true" hidden="false">
									<Dimensions x="300" y="26" />
									<Anchor point="LEFT" relativeTo="$(parent)" relativePoint="LEFT"/>
									
									<OnInitialized>
										self.state = 1
										self.data = {
											tooltipText = "Choose the meter background color",
											text = "Background Color: ",
											controlType = OPTIONS_COLOR,
											GetSettingOverride = function(control)
												return ZO_ColorDef.ToARGBHexadecimal(control:GetNamedChild("Color"):GetColor())
											end,
										}						
									</OnInitialized>
								</Control>
								<Button name="$(parent)Reset" inherits="ZO_CheckButton_Text" horizontalAlignment="LEFT" font="ZoFontWinH4" modifyTextType="UPPERCASE" text="reset">
									<Dimensions x="50" y="26" />
									<Anchor point="LEFT" relativeTo="$(parent)Color" relativePoint="RIGHT" offsetX="24"/>
									<FontColors
										normalColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_NORMAL"
										pressedColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_NORMAL"
										mouseOverColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_HIGHLIGHT"
										disabledColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_DISABLED"
									/>
									<OnInitialized>
										self.data = { tooltipText = "Reset to default color" }
									</OnInitialized>
									<OnMouseEnter>
										ZO_Options_CheckBoxOnMouseEnter(self)
										self:SetPressedFontColor(GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_HIGHLIGHT))
									</OnMouseEnter>
									<OnMouseExit>
										ZO_Options_CheckBoxOnMouseExit(self)
										self:SetPressedFontColor(GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_NORMAL))
									</OnMouseExit>
									<OnClicked>
										SimpleDPS.ConfigUI:resetBackgroundColor()
									</OnClicked>
								</Button>									
							</Controls>
						</Control>
						
						<Control name="$(parent)Static">
							<Dimensions x="450" y="26" />
							<Anchor point="TOP" relativeTo="$(parent)Background" relativePoint="BOTTOM" offsetY="18" />
							
							<Controls>
								<Control name="$(parent)Color" inherits="ZO_Options_Color" inheritAlpha="true" hidden="false">
									<Dimensions x="300" y="26" />
									<Anchor point="LEFT" relativeTo="$(parent)" relativePoint="LEFT"/>
									
									<OnInitialized>
										self.state = 1
										self.data = {
											tooltipText = "Choose the coloring of static meter text (labels and previous fight stats)",
											text = "Static Text Color: ",
											controlType = OPTIONS_COLOR,
											GetSettingOverride = function(control)
												return ZO_ColorDef.ToARGBHexadecimal(control:GetNamedChild("Color"):GetColor())
											end,
										}						
									</OnInitialized>
								</Control>
								<Button name="$(parent)Reset" inherits="ZO_CheckButton_Text" horizontalAlignment="LEFT" font="ZoFontWinH4" modifyTextType="UPPERCASE" text="reset">
									<Dimensions x="50" y="26" />
									<Anchor point="LEFT" relativeTo="$(parent)Color" relativePoint="RIGHT" offsetX="24"/>
									<FontColors
										normalColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_NORMAL"
										pressedColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_NORMAL"
										mouseOverColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_HIGHLIGHT"
										disabledColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_DISABLED"
									/>
									<OnInitialized>
										self.data = { tooltipText = "Reset to default color" }
									</OnInitialized>
									<OnMouseEnter>
										ZO_Options_CheckBoxOnMouseEnter(self)
										self:SetPressedFontColor(GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_HIGHLIGHT))
									</OnMouseEnter>
									<OnMouseExit>
										ZO_Options_CheckBoxOnMouseExit(self)
										self:SetPressedFontColor(GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_NORMAL))
									</OnMouseExit>
									<OnClicked>
										SimpleDPS.ConfigUI:resetStaticTextColor()
									</OnClicked>
								</Button>									
							</Controls>
						</Control>
						
						<Control name="$(parent)Active">
							<Dimensions x="450" y="26" />
							<Anchor point="TOP" relativeTo="$(parent)Static" relativePoint="BOTTOM" offsetY="18" />
							
							<Controls>
								<Control name="$(parent)Color" inherits="ZO_Options_Color" inheritAlpha="true" hidden="false">
									<Dimensions x="300" y="26" />
									<Anchor point="LEFT" relativeTo="$(parent)" relativePoint="LEFT"/>
									
									<OnInitialized>
										self.state = 1
										self.data = {
											tooltipText = "Choose the coloring of current fight stats when in combat",
											text = "Active Text Color: ",
											controlType = OPTIONS_COLOR,
											GetSettingOverride = function(control)
												return ZO_ColorDef.ToARGBHexadecimal(control:GetNamedChild("Color"):GetColor())
											end,
										}						
									</OnInitialized>
								</Control>
								<Button name="$(parent)Reset" inherits="ZO_CheckButton_Text" horizontalAlignment="LEFT" font="ZoFontWinH4" modifyTextType="UPPERCASE" text="reset">
									<Dimensions x="50" y="26" />
									<Anchor point="LEFT" relativeTo="$(parent)Color" relativePoint="RIGHT" offsetX="24"/>
									<FontColors
										normalColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_NORMAL"
										pressedColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_NORMAL"
										mouseOverColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_HIGHLIGHT"
										disabledColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_DISABLED"
									/>
									<OnInitialized>
										self.data = { tooltipText = "Reset to default color" }
									</OnInitialized>
									<OnMouseEnter>
										ZO_Options_CheckBoxOnMouseEnter(self)
										self:SetPressedFontColor(GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_HIGHLIGHT))
									</OnMouseEnter>
									<OnMouseExit>
										ZO_Options_CheckBoxOnMouseExit(self)
										self:SetPressedFontColor(GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_NORMAL))
									</OnMouseExit>
									<OnClicked>
										SimpleDPS.ConfigUI:resetActiveTextColor()
									</OnClicked>
								</Button>								
							</Controls>
						</Control>
						
						<Control name="$(parent)Inactive">
							<Dimensions x="450" y="26" />
							<Anchor point="TOP" relativeTo="$(parent)Active" relativePoint="BOTTOM" offsetY="18" />
			
							<Controls>
								<Control name="$(parent)Color" inherits="ZO_Options_Color" inheritAlpha="true" hidden="false">
									<Dimensions x="300" y="26" />
									<Anchor point="LEFT" relativeTo="$(parent)" relativePoint="LEFT"/>
									
									<OnInitialized>
										self.state = 1
										self.data = {
											tooltipText = "Choose the coloring of final current fight stats after leaving combat",
											text = "Inactive Text Color: ",
											controlType = OPTIONS_COLOR,
											GetSettingOverride = function(control)
												return ZO_ColorDef.ToARGBHexadecimal(control:GetNamedChild("Color"):GetColor())
											end,
										}						
									</OnInitialized>
								</Control>
								<Button name="$(parent)Reset" inherits="ZO_CheckButton_Text" horizontalAlignment="LEFT" font="ZoFontWinH4" modifyTextType="UPPERCASE" text="reset">
									<Dimensions x="50" y="26" />
									<Anchor point="LEFT" relativeTo="$(parent)Color" relativePoint="RIGHT" offsetX="24"/>
									<FontColors
										normalColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_NORMAL"
										pressedColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_NORMAL"
										mouseOverColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_HIGHLIGHT"
										disabledColor="INTERFACE_COLOR_TYPE_TEXT_COLORS:INTERFACE_TEXT_COLOR_DISABLED"
									/>
									<OnInitialized>
										self.data = { tooltipText = "Reset to default color" }
									</OnInitialized>
									<OnMouseEnter>
										ZO_Options_CheckBoxOnMouseEnter(self)
										self:SetPressedFontColor(GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_HIGHLIGHT))
									</OnMouseEnter>
									<OnMouseExit>
										ZO_Options_CheckBoxOnMouseExit(self)
										self:SetPressedFontColor(GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_NORMAL))
									</OnMouseExit>
									<OnClicked>
										SimpleDPS.ConfigUI:resetInactiveTextColor()
									</OnClicked>
								</Button>
							</Controls>
						</Control>
					</Controls>
				</Control>
				
				<Label name="$(parent)SlashCommand" font="ZoFontGame" inheritAlpha="true" color="FAFAFA"
					wrapMode="TRUNCATE" verticalAlignment="TOP" horizontalAlignment="CENTER" text="/simpledps">
					<Anchor point="BOTTOM" relativeTo="$(parent)" relativePoint="BOTTOM" offsetY="-12"/>		
				</Label>
			</Controls>
		</TopLevelControl>
	</Controls>
</GuiXml>